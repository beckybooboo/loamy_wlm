ok let's start developing a server backend that will be used as an API for a react front-end.  I am building a website that will have a static home page, and then a survey-centic application which you need to use sign in/register with google (using @react-oauth/google) to access. A signed in user will be asked questions.  Questions will be stored in a Questions database, each question also storing its prescribed answer type (multiple choice/free entry).  If a question is multiple choice, the allowed choices will be stored with the question as well.  I want the user's selected answers to each question to be stored in a way associated with that user, such that the user can be assessed and given a grade based on all questions they have answered.  I want there to be a survey page in the front end where the user goes to take the survey.  At first, I want it to show them all questions in the database for which they don't have an answer stored, but eventually I want to be able to dynamically present questions from the questions database based on more complicated critera.  As an example, perhaps I want to ask this user "question 8" because of the answers stored in their profile from a previous visit.  There will likely also be new questions added over time, which hopefully this makes it easier for users to come back and only answer the ones they haven't answered already.  I also would like the user to have a way to reset all answers and start over if they'd like.

The overall purpose of this survey is to show users which personality type they are.  I will be using a proprietary analysis of my questions in order to give the user one of 16 different outcomes.  Let's call these outcomes "zodiac signs" for the purposes of this application.  I will have one landing page per zodiac sign that has lots of information about that sign, but also which of the user's answers led to the conclusion that it's the correct zodiac sign.  So it's mostly a static page, but there's some user-centric dynamic content at the top.

I have a .env file containing MONGODB_URI and GOOGLE_CLIENT_ID

all backend routes will fall under a /api router, and there are authentication related routes under /auth, and survey related routes under /survey

I'm using axios for all App.js react app HTTP calls.